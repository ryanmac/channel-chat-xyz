// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  username      String?       @unique
  password      String?
  image         String?
  role          UserRole      @default(USER)
  accounts      Account[]
  chats         Chat[]
  sessions      Session[]
  badges        UserBadge[]   @relation("UserBadges")
  sharedChats   SharedChat[]
  transactions  Transaction[]
  ChatSession   ChatSession[]
}

enum UserRole {
  ADMIN
  USER
}

model Chat {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  channelId String
  user      User      @relation(fields: [userId], references: [id])
  channel   Channel   @relation(fields: [channelId], references: [id])
  messages  Message[]

  @@index([userId, channelId])
}

model ChatSession {
  id           String    @id @default(cuid())
  channelId    String
  userId       String?
  sessionId    String // For anonymous users
  tokenCount   Int       @default(0)
  messageCount Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  channel      Channel   @relation(fields: [channelId], references: [id])
  user         User?     @relation(fields: [userId], references: [id])
  messages     Message[]

  @@index([channelId])
  @@index([userId])
  @@index([sessionId])
}

model Message {
  id            String      @id @default(cuid())
  content       String
  tokenCount    Int
  createdAt     DateTime    @default(now())
  type          MessageType
  chatSessionId String
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id])
  Chat          Chat?       @relation(fields: [chatId], references: [id])
  chatId        String?
}

enum MessageType {
  USER
  AI
}

model Channel {
  id                String           @id @default(cuid()) // YouTube Channel ID
  name              String           @unique // YouTube Channel Name (@[channelName])
  title             String? // YouTube Channel Title
  description       String? // YouTube Channel Description
  subscriberCount   Int?             @default(0) // Total number of subscribers on YouTube channel
  videoCount        Int?             @default(0) // Total number of videos on YouTube channel
  viewCount         Int?             @default(0) // Total number of views on YouTube channel
  imageUrl          String? // YouTube Channel Image URL
  bannerUrl         String? // YouTube Channel Banner URL
  status            ChannelStatus    @default(PENDING)
  activationFunding Int              @default(0)
  activationGoal    Int              @default(10)
  creditBalance     Int              @default(0)
  isProcessing      Boolean          @default(false)
  totalEmbeddings   Int              @default(0)
  totalVideos       Int              @default(0)
  model             String           @default("gpt-4o-mini")
  maxTokens         Int              @default(200)
  chatsCreated      Int              @default(0)
  isFineTuned       Boolean          @default(false)
  botScore          Int              @default(0)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  chats             Chat[]
  boosts            ChannelBoost[]
  transactions      Transaction[]
  metrics           ChannelMetrics[]
  ChatSessions      ChatSession[]

  @@index([name])
}

enum ChannelStatus {
  PENDING
  ACTIVE
  INACTIVE
}

model ChannelMetrics {
  id        String   @id @default(cuid())
  channelId String
  date      DateTime
  views     Int
  chats     Int
  channel   Channel  @relation(fields: [channelId], references: [id])

  @@unique([channelId, date])
}

model ChannelBoost {
  id        String           @id @default(uuid())
  channelId String
  boostType ChannelBoostType
  value     Int
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  channel   Channel          @relation(fields: [channelId], references: [id])
}

enum ChannelBoostType {
  MEMORY
  TOKENS
  FINE_TUNING
}

model Transaction {
  id          String          @id @default(cuid())
  channelId   String
  userId      String?
  sessionId   String
  amount      Float
  type        TransactionType
  description String?
  createdAt   DateTime        @default(now())
  channel     Channel         @relation(fields: [channelId], references: [id])
  user        User?           @relation(fields: [userId], references: [id])

  @@index([channelId])
  @@index([userId])
  @@index([sessionId])
}

enum TransactionType {
  ACTIVATION
  CREDIT_PURCHASE
}

model Badge {
  id        String      @id @default(cuid())
  name      String      @unique
  createdAt DateTime    @default(now())
  users     UserBadge[] @relation("BadgeUserBadges")
}

model SessionBadge {
  id        String   @id @default(cuid())
  sessionId String   @unique
  badges    String // Comma-separated list of badges
  createdAt DateTime @default(now())
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], name: "UserBadges")
  badge     Badge    @relation(fields: [badgeId], references: [id], name: "BadgeUserBadges")
}

model SharedChat {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model ConfigurationSetting {
  key         String  @id @unique
  value       String
  description String?
}

enum SettingType {
  STRING
  INTEGER
  BOOLEAN
  FLOAT
}
